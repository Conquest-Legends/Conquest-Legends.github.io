<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Conquest_Legends&#39;s blog</title>
  
  <subtitle>DxrNb</subtitle>
  <link href="http://conquest-legends.github.io/atom.xml" rel="self"/>
  
  <link href="http://conquest-legends.github.io/"/>
  <updated>2021-06-21T22:06:10.383Z</updated>
  <id>http://conquest-legends.github.io/</id>
  
  <author>
    <name>Conquest-Legends</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树</title>
    <link href="http://conquest-legends.github.io/2021/06/21/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://conquest-legends.github.io/2021/06/21/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-06-21T12:49:30.000Z</published>
    <updated>2021-06-21T22:06:10.383Z</updated>
    
    <content type="html"><![CDATA[<p><del>最近实在是不想看排序和线性表这么水的东西了。</del></p><p>所以找了个二叉树玩玩。</p><span id="more"></span><p>（不大想在学校里边画图，所以图回家再说呗，<del>而且我在家也一般先搭建 hexo 的个人 blog</del>）</p><p><del>再者说这是我个人的学习笔记我自己看懂不就好了。</del></p><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>二叉树是一种特殊的树，每次分叉不超过两部分。这是非常重要和基础的数据结构。</p><h2 id="Type-and-Nature"><a href="#Type-and-Nature" class="headerlink" title="Type and Nature"></a>Type and Nature</h2><p>来看道题，一边看一边说：</p><ul><li><a href="https://www.luogu.com.cn/problem/P4715">https://www.luogu.com.cn/problem/P4715</a></li></ul><p>可以看出，1和2先掘一死战，3和4起床战争，5和6空岛战争……</p><p>然后胜者晋级，再开始速建啥的（）</p><p>可以看出来，并不是第二强的人就一定能拿到亚军，因为可能你还没进决赛就被 KO 了。</p><p>这就好比你是 sapnap，然后第一局就碰上了 dream 被秒掉了，然后 georgenotfound 却一路撂倒 badboyhello，Antforest来到决赛，却被 dream 秒杀（）</p><p>那么还有一个特别好玩的地方在于，从冠军（<strong>根节点</strong>）往下面看，每个 winner 下面都会有两个选手，那么这就是一颗典型的二叉树。</p><p>更加严格一点的递归定义是：二叉树要么是空的，要么由根节点，左子树，右子树构成，而且左右子树也分别是二叉树。</p><p>如果一个结点下面没有子树了，那么这个点叫做<strong>叶子结点</strong>。</p><p>一个二叉树有几层节点，它的深度就是多少，深度一共为 $h$，那么一共有 $2^{h}-1$ 个结点的二叉树叫做<strong>满二叉树</strong>（也有叫完美二叉树的）。</p><p>对于完美二叉树，我们从上到下，从左到右依次分配结点，然后你会发现一个特别好玩的地方：</p><ul><li>对于 $i$ 号非叶子结点，左子树编号为 $2 \times i$，右子树编号为 $2 \times i+1$。</li></ul><p>然后，我们就可以造一个足够大的数组来把这玩意给存下来！</p><p>通过计算编号来访问左右子树，使用递归的方式得到各个子树的统计，这题就出来了。</p><p>另外，看代码之前建议阅读一下这篇文章：<a href="https://www.luogu.com.cn/blog/Conqueror886/zuo-yi-you-yi-zhi-duo-shao">https://www.luogu.com.cn/blog/Conqueror886/zuo-yi-you-yi-zhi-duo-shao</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">265</span>], w[<span class="number">265</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inp</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>&lt;&lt;n; i++) &#123; <span class="comment">// 从0开始哟</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i+(<span class="number">1</span>&lt;&lt;n)]); <span class="comment">// 读入各个结点的能力值</span></span><br><span class="line">        w[i+(<span class="number">1</span>&lt;&lt;n)] = i+<span class="number">1</span>; <span class="comment">// 叶子结点的 winner 就是自己国家的编号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">1</span>&lt;&lt;n) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">2</span>*x);</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">2</span>*x+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> l = v[<span class="number">2</span>*x], r = v[<span class="number">2</span>*x+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) &#123;</span><br><span class="line">            v[x] = l;</span><br><span class="line">            w[x] = w[x*<span class="number">2</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            v[x] = r;</span><br><span class="line">            w[x] = w[x*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[<span class="number">2</span>] &gt; v[<span class="number">3</span>]) &#123; <span class="comment">// 输出亚军</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, w[<span class="number">3</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, w[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">inp</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>); <span class="comment">// 从根节点开始遍历</span></span><br><span class="line">    <span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>先谈谈什么是遍历。</p><p>二叉树遍历的意思就是将一颗二叉树按照一定的顺序不重不漏地按顺序访问每一个结点。</p><h3 id="二叉树的深度优先遍历"><a href="#二叉树的深度优先遍历" class="headerlink" title="二叉树的深度优先遍历"></a>二叉树的深度优先遍历</h3><p>二叉树的深度优先遍历的意思是：</p><ul><li>对于给定任意结点，可以访问结点本身，也可以去找结点的左子树和右子树。</li></ul><p>有三种遍历方式：</p><ul><li><p>前序遍历：首先去找根结点，然后遍历左子树，最后遍历右子树。</p></li><li><p>中序遍历：首先去遍历左子树，然后访问根结点，最后遍历右子树。</p></li><li><p>后序遍历：首先遍历左子树，然后遍历右子树，最后访问根结点。</p></li></ul><p>既然是深度优先遍历那肯定跟 dfs 有关所以我们直接按照上面的三句话的意思去遍历好了。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">&#125;a[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].l, &amp;a[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 先序遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a[x].l) &#123;</span><br><span class="line">        <span class="built_in">pre_order</span>(a[x].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[x].r) &#123;</span><br><span class="line">        <span class="built_in">pre_order</span>(a[x].r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="keyword">if</span>(a[x].l) &#123;</span><br><span class="line">        <span class="built_in">in_order</span>(a[x].l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a[x].r) &#123;</span><br><span class="line">        <span class="built_in">in_order</span>(a[x].r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">post_order</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="keyword">if</span>(a[x].l) &#123;</span><br><span class="line">        <span class="built_in">post_order</span>(a[x].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[x].r) &#123;</span><br><span class="line">        <span class="built_in">post_order</span>(a[x].r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">inp</span>();</span><br><span class="line">    <span class="built_in">pre_order</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">in_order</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">post_order</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Example-Problem"><a href="#Example-Problem" class="headerlink" title="Example Problem"></a>Example Problem</h2><ul><li>P1827 [USACO3.4]美国血统 American Heritage</li></ul><h3 id="Teleport：https-www-luogu-com-cn-problem-P1827"><a href="#Teleport：https-www-luogu-com-cn-problem-P1827" class="headerlink" title="Teleport：https://www.luogu.com.cn/problem/P1827"></a>Teleport：<a href="https://www.luogu.com.cn/problem/P1827">https://www.luogu.com.cn/problem/P1827</a></h3><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先请确保您读完了上面的遍历程序。</p><p>然后这里先放代码，思路这个东西 Ptilopsis_w 大佬写过剪贴板，一并奉上：</p><p><a href="https://www.luogu.com.cn/paste/9x4gppvv">https://www.luogu.com.cn/paste/9x4gppvv</a></p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = l2; i &lt;= r2; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s1[i] == s2[l1]) &#123;</span><br><span class="line">            <span class="built_in">work</span>(l1+<span class="number">1</span>, l1+i-l2, l2, i<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">work</span>(l1+i-l2+<span class="number">1</span>, r1, i+<span class="number">1</span>, r2);</span><br><span class="line">            cout&lt;&lt;s2[l1];</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">inp</span>();</span><br><span class="line">    <span class="keyword">int</span> r = s2.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">work</span>(<span class="number">0</span>, r, <span class="number">0</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>P1229 遍历问题</li></ul><h3 id="Teleport：https-www-luogu-com-cn-problem-P1229"><a href="#Teleport：https-www-luogu-com-cn-problem-P1229" class="headerlink" title="Teleport：https://www.luogu.com.cn/problem/P1229"></a>Teleport：<a href="https://www.luogu.com.cn/problem/P1229">https://www.luogu.com.cn/problem/P1229</a></h3><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>我们研究研究题目可以发现，在知道前序后序遍历的情况下，如果要有不同的中序遍历，必须当这个结点只有一个儿子。</p><p>所以这个问题可以转换成一个求只有一个儿子的结点个数的问题。</p><p>那么如何判断呢？</p><p>假设一个结点名称为 $\mathtt{Dxr}$， 它的儿子为 $\mathtt{Nb}$。</p><p>如果前序中是 $\mathtt{DxrNb}$，后序中是 $\mathtt{NbDxr}$，那么 $\mathtt{Dxr}$ 这个结点只会有一个儿子——$\mathtt{Nb}$。</p><p>（跟我本人一点关系都没有！！！！！！！！！！）</p><p>假设一共有 $x$ 个结点只有一个儿子，那它只有两种选择：</p><ul><li><p>有一个左儿子。</p></li><li><p>有一个右儿子。</p></li></ul><p>根据乘法原理，可能的二叉树的答案就会是：$2^x$ 棵。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string a, b;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; a[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>; b[j]; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[j] <span class="keyword">and</span> a[i+<span class="number">1</span>] == b[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">1</span>&lt;&lt;ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">inp</span>();</span><br><span class="line">    <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>P1305 新二叉树</li></ul><h3 id="Teleport：https-www-luogu-com-cn-problem-P1305"><a href="#Teleport：https-www-luogu-com-cn-problem-P1305" class="headerlink" title="Teleport：https://www.luogu.com.cn/problem/P1305"></a>Teleport：<a href="https://www.luogu.com.cn/problem/P1305">https://www.luogu.com.cn/problem/P1305</a></h3><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>输入一个二叉树，输出前序遍历。</p><p>首先一看这道题全是一堆字符，我就想起了 map。</p><p>不会 map 的看这里：<a href="https://www.luogu.com.cn/blog/Conqueror886/stl-standard-template-library-zhi-map">https://www.luogu.com.cn/blog/Conqueror886/stl-standard-template-library-zhi-map</a></p><p>我们开两个 map，一个对应左儿子，另一个对应右儿子，然后每次递归的时候看看如果不是 <code>*</code> 的话就继续。</p><p>有一个十分十分坑的地方在于，这里的输入建议使用 <code>cin</code>，因为你用 <code>scanf</code> 直接读进去个换行符就很难受，再加上 Windows 和 Linux 水火不容的换行操作很可能让你暴毙（Windows换行是 <code>\r\n</code>，但是 Linux 是 <code>\n</code>）。</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">map &lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; x;</span><br><span class="line">map &lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> root[<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> left, right;</span><br><span class="line">        cin&gt;&gt;root[i]&gt;&gt;left&gt;&gt;right;</span><br><span class="line"></span><br><span class="line">        x[root[i]] = left;</span><br><span class="line">        y[root[i]] = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">char</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x[root] != <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">work</span>(x[root]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y[root] != <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">work</span>(y[root]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">inp</span>();</span><br><span class="line">    <span class="built_in">work</span>(root[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mathcal-To-Be-Continued-dots"><a href="#mathcal-To-Be-Continued-dots" class="headerlink" title="$\mathcal{To\ Be\ Continued\dots}$"></a>$\mathcal{To\ Be\ Continued\dots}$</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;最近实在是不想看排序和线性表这么水的东西了。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;所以找了个二叉树玩玩。&lt;/p&gt;</summary>
    
    
    
    <category term="普及组" scheme="http://conquest-legends.github.io/categories/%E6%99%AE%E5%8F%8A%E7%BB%84/"/>
    
    
  </entry>
  
  <entry>
    <title>BFS</title>
    <link href="http://conquest-legends.github.io/2021/06/21/BFS/"/>
    <id>http://conquest-legends.github.io/2021/06/21/BFS/</id>
    <published>2021-06-21T05:52:54.000Z</published>
    <updated>2021-06-21T22:06:15.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搜索简介"><a href="#搜索简介" class="headerlink" title="搜索简介"></a>搜索简介</h2><p>搜索，就是把所有的决策树全都看一遍，穷尽所有的情况来找到最优解或是所有合法的解数。</p><span id="more"></span><p>搜索可以让你的骗分骗得十分爽，并且搜索也是很多高级算法的基础。</p><p>我们先讲讲BFS。</p><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>BFS就是广度优先搜索的简称，它的搜索方式是这样的：</p><p>BFS会将同一层的决策树上的决策全部都看一遍，然后再去看下一层的东西。</p><p>不同于DFS，DFS是不撞南墙不回头。</p><p>举个例子，你在一个陌生的地方，你想快速找到WC，在没有任何外在帮助的条件下你肯定会一层楼一层楼地去看，而不是先从一楼爬到最顶层看第一个房间，然后再爬回去顺便看第二个房间……</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>BFS的实现并不是很难，需要用到队列，队列是一种数据结构，对于BFS来讲只需要知道队列怎么写就可以了：<a href="https://www.luogu.com.cn/blog/Conqueror886/bfs-qian-zhi-ji-neng-dui-lie-stl-ban-post">https://www.luogu.com.cn/blog/Conqueror886/bfs-qian-zhi-ji-neng-dui-lie-stl-ban-post</a>。</p><p>然后，BFS的实现其实也很简单。</p><p>首先我们开个队列，将初始的元素推入队列，然后标记成已经搜过，然后进行一波搜索，搜完之后将它扔出队列，在这一过程中同时推入下一个元素进队列，直到队列被弹空。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>如果你看不懂的话，请按照代码自个打一遍，在纸上写写画画，然后就会豁然开朗。</p><h3 id="血色先锋队"><a href="#血色先锋队" class="headerlink" title="血色先锋队"></a>血色先锋队</h3><p>（这道题有一丝丝的变态，看不懂可以先往后面看，但是这道题是写得注释最多的，可以先瞅一眼了解下BFS怎么写）。</p><ul><li><p>题目：<a href="https://www.luogu.com.cn/problem/P1332">https://www.luogu.com.cn/problem/P1332</a>。</p></li><li><p>题解： <a href="https://www.luogu.com.cn/blog/Conqueror886/ti-xie-p1332-xie-se-xian-feng-dui-post">https://www.luogu.com.cn/blog/Conqueror886/ti-xie-p1332-xie-se-xian-feng-dui-post</a>。</p></li></ul><h3 id="好奇怪的电梯"><a href="#好奇怪的电梯" class="headerlink" title="好奇怪的电梯"></a>好奇怪的电梯</h3><ul><li><p>题目：<a href="https://www.luogu.com.cn/problem/P1135">https://www.luogu.com.cn/problem/P1135</a>。</p></li><li><p>题解：<a href="https://www.luogu.com.cn/blog/Conqueror886/ti-xie-p1135-ji-guai-di-dian-ti-post">https://www.luogu.com.cn/blog/Conqueror886/ti-xie-p1135-ji-guai-di-dian-ti-post</a>。</p></li></ul><h3 id="离开中山路"><a href="#离开中山路" class="headerlink" title="离开中山路"></a>离开中山路</h3><ul><li><p>题目：<a href="https://www.luogu.com.cn/problem/P1746">https://www.luogu.com.cn/problem/P1746</a></p></li><li><p>题解：<a href="https://www.luogu.com.cn/blog/Conqueror886/ti-xie-p1746-li-kai-zhong-shan-lu-post">https://www.luogu.com.cn/blog/Conqueror886/ti-xie-p1746-li-kai-zhong-shan-lu-post</a>。</p></li></ul><h3 id="马的遍历"><a href="#马的遍历" class="headerlink" title="马的遍历"></a>马的遍历</h3><ul><li><p>题目：<a href="https://www.luogu.com.cn/problem/P1443">https://www.luogu.com.cn/problem/P1443</a>。</p></li><li><p>题解：<a href="https://www.luogu.com.cn/blog/Conqueror886/ti-xie-p1443-ma-di-bian-li-post">https://www.luogu.com.cn/blog/Conqueror886/ti-xie-p1443-ma-di-bian-li-post</a>。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;搜索简介&quot;&gt;&lt;a href=&quot;#搜索简介&quot; class=&quot;headerlink&quot; title=&quot;搜索简介&quot;&gt;&lt;/a&gt;搜索简介&lt;/h2&gt;&lt;p&gt;搜索，就是把所有的决策树全都看一遍，穷尽所有的情况来找到最优解或是所有合法的解数。&lt;/p&gt;</summary>
    
    
    
    <category term="普及组" scheme="http://conquest-legends.github.io/categories/%E6%99%AE%E5%8F%8A%E7%BB%84/"/>
    
    
  </entry>
  
</feed>
